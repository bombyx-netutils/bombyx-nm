#!/usr/bin/env python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

# Copyright (c) 2005-2014 Fpemud <fpemud@sina.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import sys
import argparse
sys.path.append('/usr/lib/bombyx')
from byx_common import ByxNetworkType
from byx_cmd import MainImpl


def print_usage():
    print("bombyx - a network manager which is hard to configure but easy to use")
    print("")
    print("Usage:")
    print("    bombyx status")
    print("        * Show network status")
    print("")
    print("    bombyx enable [--wired] [--wireless] [--mobile]")
    print("        * Enable network function")
    print("")
    print("    bombyx disable [--wired] [--wireless] [--mobile]")
    print("        * Disable network function")
    print("")
    print("    bombyx activate <connection>")
    print("        * Activate a specified connection")
    print("")
    print("    bombyx deactivate")
    print("        * Deactivate the current connection")
    print("")


def parse_args():
    argParser = argparse.ArgumentParser()
    subParsers = argParser.add_subparsers()

    sp = subParsers.add_parser("help", help='Show help')
    sp.set_defaults(subcmd="help")

    sp = subParsers.add_parser("status", help='Show networkmanager status')
    sp.set_defaults(subcmd="status")

    sp = subParsers.add_parser("enable", help='Enable networkmanager functions')
    sp.set_defaults(subcmd="enable")
    sp.add_argument("--wired", action="store_true")
    sp.add_argument("--wireless", action="store_true")
    sp.add_argument("--mobile", action="store_true")

    sp = subParsers.add_parser("disable", help='Disable networkmanager functions')
    sp.set_defaults(subcmd="disable")
    sp.add_argument("--wired", action="store_true")
    sp.add_argument("--wireless", action="store_true")
    sp.add_argument("--mobile", action="store_true")

    sp = subParsers.add_parser("activate", help='Activate a connection')
    sp.set_defaults(subcmd="activate")
    sp.add_argument("connection")

    sp = subParsers.add_parser("deactivate", help='Deactivate a connection')
    sp.set_defaults(subcmd="deactivate")

    return argParser.parse_args()


if __name__ == "__main__":
    options = parse_args()

    if not hasattr(options, "subcmd"):
        print_usage()
        sys.exit(1)

    mainObj = MainImpl()
    if options.subcmd is 'help':
        print_usage()
    elif options.subcmd is 'status':
        mainObj.show_status()
    elif options.subcmd is 'enable':
        done = False
        if options.mobile:
            mainObj.enable_network_type(ByxNetworkType.WIRED, True)
            done = True
        if options.wireless:
            mainObj.enable_network_type(ByxNetworkType.WIRELESS, True)
            done = True
        if options.mobile:
            mainObj.enable_network_type(ByxNetworkType.MOBILE, True)
            done = True
        if not done:
            mainObj.enable(True)
    elif options.subcmd is 'disable':
        done = False
        if options.mobile:
            mainObj.enable_network_type(ByxNetworkType.MOBILE, False)
            done = True
        if options.wireless:
            mainObj.enable_network_type(ByxNetworkType.WIRELESS, False)
            done = True
        if options.mobile:
            mainObj.enable_network_type(ByxNetworkType.WIRED, False)
            done = True
        if not done:
            mainObj.enable(False)
    elif options.subcmd is 'activate':
        mainObj.activate_connection(options.connection)
    elif options.subcmd is 'deactivate':
        mainObj.deactivate_connection()
    else:
        print_usage()
        sys.exit(1)
